(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{352:function(_,v,t){"use strict";t.r(v);var e=t(42),l=Object(e.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"nio"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nio"}},[_._v("#")]),_._v(" NIO")]),_._v(" "),t("h2",{attrs:{id:"网络编程模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#网络编程模型"}},[_._v("#")]),_._v(" 网络编程模型")]),_._v(" "),t("p",[_._v("1.阻塞式IO")]),_._v(" "),t("p",[_._v("2.非阻塞式IO")]),_._v(" "),t("p",[_._v("3.NIO（select ,poll ,epoll）")]),_._v(" "),t("p",[_._v("4.信号量驱动式IO")]),_._v(" "),t("p",[_._v("5.异步IO")]),_._v(" "),t("p",[_._v("select的缺点：")]),_._v(" "),t("p",[_._v("1.每次调用都需要把 fd 集合从用户态拷贝到内核心态，在 fd 集合较大时性能差")]),_._v(" "),t("p",[_._v("2.每次检查准备好的 fd 都需要遍历整个 fd 集合")]),_._v(" "),t("p",[_._v("3.存在最大文件数限制。 可以修改 FD_SETSIZE 来改变但不建议这样做")]),_._v(" "),t("p",[_._v("poll的问题：和 select 很相似 但是采用的是链式存储 且无最大文件数限制")]),_._v(" "),t("p",[_._v("epoll:")]),_._v(" "),t("p",[_._v("1.通过一个文件描述符来监听所有关心的 fd 集合，只需要拷贝一次，大大提升了性能")]),_._v(" "),t("p",[_._v("2.通用回调机制来取代轮询机制，提升了效率,另外 epoll_wait轮询的数组中也只有准备好的 fd 而不是全部。")]),_._v(" "),t("p",[_._v("3.无最大文件数限制")]),_._v(" "),t("p",[_._v("4.支持两种触发方式。")]),_._v(" "),t("p",[_._v("LT 水平触发：当有可读可写事件时 epoll_wait会通知程序处理，如果没处理完，下次调用 epoll_wait时还会通知继续处理。默认处理方式")]),_._v(" "),t("p",[_._v("ET 边缘触发 ：epoll_wait 通知程序去处理时，如果没有处理完，下次不会再通知。效率更高。")]),_._v(" "),t("p",[_._v("5.由于回调和通知机制，在连接数少且不活跃的状态，性能会比 select 差一点")]),_._v(" "),t("p",[_._v("JAVA中的NIO 中的 selector 但其底层实现是 epoll")])])}),[],!1,null,null,null);v.default=l.exports}}]);