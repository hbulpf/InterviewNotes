(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{354:function(n,t,s){"use strict";s.r(t);var i=s(42),e=Object(i.a)({},(function(){var n=this.$createElement,t=this._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h1",{attrs:{id:"操作系统面试题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#操作系统面试题"}},[this._v("#")]),this._v(" 操作系统面试题")]),this._v(" "),t("ol",[t("li",[this._v("操作系统中进程和线程的区别？\n技术点：进程、线程\n参考回答：\n进程是操作系统分配和管理资源的单位，线程是CPU调度和管理的单位，是CPU调度的最小单元\n进程拥有独立的地址空间，而线程间共享地址空间\n进程创建的开销比较大，线程创建的开销小\n引申：可谈谈安卓系统中对进程和线程的理解")]),this._v(" "),t("li",[this._v("进程死锁的产生和避免?\n技术点：死锁\n思路：可从死锁含义、产生条件、解决办法、避免手段出发\n参考回答：死锁是指多个进程因循环等待资源而造成无法执行的现象，它会造成进程无法执行，同时会造成系统资源的极大浪费。\n死锁产生的条件：\n互斥使用：指进程对所分配到的资源进行排它性使用，即在一段时间内某资源只由一个进程占用。如果此时还有其它进程请求资源，则请求者只能等待，直至占有资源的进程用毕释放。\n不可抢占：指进程已获得的资源，在未使用完之前，不能被剥夺，只能在使用完时由自己释放。\n请求和保持：指进程已经保持至少一个资源，但又提出了新的资源请求，而该资源已被其它进程占有，此时请求进程阻塞，但又对自己已获得的其它资源保持不放。\n循环等待：指在发生死锁时，必然存在一个进程——资源的环形链，即进程集合{P0，P1，P2，···，Pn}中的P0正在等待一个P1占用的资源；P1正在等待P2占用的资源，……，Pn正在等待已被P0占用的资源。\n解决死锁的策略：\n银行家算法：判断此次请求是否造成死锁若会造成死锁，否则拒绝该请求\n鸵鸟算法：忽略该问题，常用于在极少发生死锁的的情况\n死锁的避免：通过合理的资源分配算法来确保永远不会形成环形等待的封闭进程链，即“如果一个进程的当前请求的资源会导致死锁，系统拒绝启动该进程；如果一个资源的分配会导致下一步的死锁，系统就拒绝本次的分配”")])])])}),[],!1,null,null,null);t.default=e.exports}}]);